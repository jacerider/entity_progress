<?php

/**
 * @file
 * Primary module hooks for entity progress module.
 */

use Drupal\Core\Cache\CacheableMetadata;
use Drupal\Core\Config\Entity\ThirdPartySettingsInterface;
use Drupal\Core\Entity\ContentEntityFormInterface;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\Entity\BaseFieldOverride;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\entity_progress\EntityProgressPreRender;

/**
 * Implements hook_theme().
 */
function entity_progress_theme() {
  $theme = [];
  $theme['entity_progress'] = [
    'variables' => [
      'progress' => [],
      'attributes' => [],
      'missing_title' => '',
      'missing_subtitle' => '',
      'complete_title' => '',
      'complete_subtitle' => '',
    ],
    'file' => 'entity_progress.page.inc',
  ];
  $theme['entity_progress_status'] = [
    'variables' => [
      'title' => '',
      'subtitle' => '',
      'trigger_label' => '',
      'percent_label' => '',
      'progress' => [],
      'show_results_link' => FALSE,
      'attributes' => [],
      'missing_title' => '',
      'missing_subtitle' => '',
      'complete_title' => '',
      'complete_subtitle' => '',
    ],
    'file' => 'entity_progress.page.inc',
  ];
  return $theme;
}

/**
 * Implements hook_form_FORM_ID_alter() for field_config_edit_form().
 */
function entity_progress_form_field_config_edit_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $form_object */
  $form_object = $form_state->getFormObject();
  /** @var \Drupal\field\FieldConfigInterface $field */
  $field = $form_object->getEntity();
  if (!isset($field)) {
    return;
  }

  $form['entity_progress'] = [
    '#type' => 'fieldset',
    '#title' => t('Entity Progress'),
    '#weight' => $form['label']['#weight'] + 1.2,
    '#tree' => TRUE,
  ];

  $form['entity_progress']['enable'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable'),
    '#description' => t('If checked, this field instance will be included in the progress calculation for its parent entity.'),
    '#default_value' => !empty($field->getThirdPartySetting('entity_progress', 'enable')) ? $field->getThirdPartySetting('entity_progress', 'enable') : NULL,
  ];

  if ($field->getType() === 'boolean') {
    $form['entity_progress']['zero'] = [
      '#type' => 'checkbox',
      '#title' => t('Count 0 as progress'),
      '#description' => t('Boolean values can be valued as 0 or 1. When enabled this will count 0 as progress and 1 or NULL as progress.'),
      '#default_value' => !empty($field->getThirdPartySetting('entity_progress', 'zero')) ? $field->getThirdPartySetting('entity_progress', 'zero') : 0,
      '#states' => [
        'visible' => [
          ':input[name="entity_progress[enable]"]' => ['checked' => TRUE],
          ':input[name="entity_progress[zero_one]"]' => ['checked' => FALSE],
        ],
      ],
    ];
    $form['entity_progress']['zero_one'] = [
      '#type' => 'checkbox',
      '#title' => t('Count 0 or 1 as progress'),
      '#description' => t('Boolean values can be valued as 0 or 1. When enabled this will count 0 or 1 as progress.'),
      '#default_value' => !empty($field->getThirdPartySetting('entity_progress', 'zero_one')) ? $field->getThirdPartySetting('entity_progress', 'zero_one') : 0,
      '#states' => [
        'visible' => [
          ':input[name="entity_progress[enable]"]' => ['checked' => TRUE],
          ':input[name="entity_progress[zero]"]' => ['checked' => FALSE],
        ],
      ],
    ];
  }

  if ($field->getFieldStorageDefinition()->getCardinality() > 1) {
    $form['entity_progress']['all'] = [
      '#type' => 'checkbox',
      '#title' => t('Require a value for all items'),
      '#description' => t('On multi-value fields, this will require that all items have a value.'),
      '#default_value' => $field->getThirdPartySetting('entity_progress', 'all', 0),
      '#states' => [
        'visible' => [
          ':input[name="entity_progress[enable]"]' => ['checked' => TRUE],
        ],
      ],
    ];
  }

  $options = [];
  $entity_field_manager = \Drupal::service('entity_field.manager');
  $definitions = $entity_field_manager->getFieldDefinitions($field->getTargetEntityTypeId(), $field->getTargetBundle());
  foreach ($definitions as $key => $definition) {
    /** @var \Drupal\Core\Field\FieldDefinitionInterface $definition */
    if ($definition instanceof ThirdPartySettingsInterface) {
      $options[$key] = $definition->getLabel() . ' (' . $key . ')';
    }
  }

  $form['entity_progress']['dependency'] = [
    '#type' => 'select',
    '#title' => t('Completion dependency'),
    '#description' => t('This field will only be included in the entity progress IF the selected field also HAS a value.'),
    '#options' => $options,
    '#empty_option' => t('- No Dependency -'),
    '#default_value' => !empty($field->getThirdPartySetting('entity_progress', 'dependency')) ? $field->getThirdPartySetting('entity_progress', 'dependency') : [],
    '#states' => [
      'visible' => [
        ':input[name="entity_progress[enable]"]' => ['checked' => TRUE],
      ],
    ],
  ];

  $form['entity_progress']['negate'] = [
    '#type' => 'checkbox',
    '#title' => t('Negate the dependency'),
    '#description' => t('This will negate the dependency so the field will only be included in the entity progress IF the dependent field DOES NOT have a value.'),
    '#default_value' => !empty($field->getThirdPartySetting('entity_progress', 'negate')) ? $field->getThirdPartySetting('entity_progress', 'negate') : 0,
    '#states' => [
      'visible' => [
        ':input[name="entity_progress[enable]"]' => ['checked' => TRUE],
        ':input[name="entity_progress[dependency]"]' => ['!value' => ''],
      ],
    ],
  ];

  $form['entity_progress']['optional'] = [
    '#type' => 'checkbox',
    '#title' => t('Make optional if dependency met'),
    '#description' => t('If dependency is met this field will be checked for completion. Enabling this option will make this field dependent on another field but will not require that it has a value.'),
    '#default_value' => !empty($field->getThirdPartySetting('entity_progress', 'optional')) ? $field->getThirdPartySetting('entity_progress', 'optional') : 0,
    '#states' => [
      'visible' => [
        ':input[name="entity_progress[enable]"]' => ['checked' => TRUE],
        ':input[name="entity_progress[dependency]"]' => ['!value' => ''],
      ],
    ],
  ];

  $form['actions']['submit']['#submit'][] = 'entity_progress_form_field_config_edit_form_submit';
}

/**
 * Form submission handler.
 *
 * @param array $form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function entity_progress_form_field_config_edit_form_submit(array $form, FormStateInterface $form_state) {
  /** @var \Drupal\Core\Field\EntityReferenceFieldItemListInterface $form_object */
  $form_object = $form_state->getFormObject();
  /** @var \Drupal\field\FieldConfigInterface $field */
  $field = $form_object->getEntity();
  $form_fields = &$form_state->getValues();
  foreach ([
    'enable',
    'dependency',
    'optional',
    'zero',
    'zero_one',
    'negate',
    'all',
  ] as $field_name) {
    if (!empty($form_fields['entity_progress'][$field_name])) {
      $field->setThirdPartySetting('entity_progress', $field_name, $form_fields['entity_progress'][$field_name]);
    }
    else {
      $field->unsetThirdPartySetting('entity_progress', $field_name);
    }
    $field->save();
  }
}

/**
 * Implements hook_form_alter().
 */
function entity_progress_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $form_object = $form_state->getFormObject();
  if ($form_object instanceof ContentEntityFormInterface) {
    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
    $entity = $form_object->getEntity();
    foreach (Element::children($form) as $id) {
      $element = &$form[$id];
      if ($field_definition = $entity->getFieldDefinition($id)) {
        if (entity_process_field_enabled($field_definition)) {
          /** @var \Drupal\entity_progress\EntityProgressManager $progress_manager */
          $progress_manager = \Drupal::service('entity_progress.manager');
          $cacheable_metadata = CacheableMetadata::createFromObject($entity);
          $progress_definitions = $progress_manager->getFieldProgress($entity, $cacheable_metadata);
          if (!isset($progress_definitions[$field_definition->getName()])) {
            continue;
          }
          $form[$id]['#entity_progress'] = TRUE;
          $form[$id]['#entity_progress_field_type'] = $field_definition->getType();
          $form[$id]['#entity_progress_settings'] = entity_process_field_settings($field_definition);

          // If type is a radio we want to remove the _none option.
          if (isset($element['widget']['#type']) && in_array($element['widget']['#type'], ['radios', 'exo_radios'])) {
            unset($element['widget']['#options']['_none']);
            if ($element['widget']['#default_value'] == '_none') {
              $element['widget']['#default_value'] = NULL;
            }
          }
        }
      }
    }
    $form['#pre_render'][] = [EntityProgressPreRender::class, 'preRender'];
  }
}

/**
 * Check if field tracks progress.
 *
 * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
 */
function entity_process_field_enabled(FieldDefinitionInterface $field_definition) {
  if ($field_settings = entity_process_field_settings($field_definition)) {
    return !empty($field_settings['enable']) || !empty($field_settings['optional']);
  }
  return FALSE;
}

/**
 * Check if field tracks progress.
 *
 * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
 */
function entity_process_field_settings(FieldDefinitionInterface $field_definition) {
  if ($field_definition instanceof BaseFieldDefinition || $field_definition instanceof BaseFieldOverride) {
    if ($field_settings = $field_definition->getSetting('entity_progress')) {
      return $field_settings;
    }
  }
  if ($field_definition instanceof ThirdPartySettingsInterface) {
    if ($field_settings = $field_definition->getThirdPartySettings('entity_progress')) {
      return $field_settings;
    }
  }
  return NULL;
}
